// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all bookings
	// (GET /bookings)
	GetBookings(ctx echo.Context) error
	// Create a new booking
	// (POST /bookings)
	PostBookings(ctx echo.Context) error
	// Delete booking
	// (DELETE /bookings/{id})
	DeleteBookingsId(ctx echo.Context, id int) error
	// Get booking by ID
	// (GET /bookings/{id})
	GetBookingsId(ctx echo.Context, id int) error
	// Update booking
	// (PUT /bookings/{id})
	PutBookingsId(ctx echo.Context, id int) error
	// List all cleaners
	// (GET /cleaners)
	GetCleaners(ctx echo.Context) error
	// Create a new cleaner
	// (POST /cleaners)
	PostCleaners(ctx echo.Context) error
	// Delete cleaner
	// (DELETE /cleaners/{id})
	DeleteCleanersId(ctx echo.Context, id int) error
	// Get cleaner by ID
	// (GET /cleaners/{id})
	GetCleanersId(ctx echo.Context, id int) error
	// Update cleaner
	// (PUT /cleaners/{id})
	PutCleanersId(ctx echo.Context, id int) error
	// List all cleaning orders
	// (GET /cleaning_orders)
	GetCleaningOrders(ctx echo.Context) error
	// Create a new cleaning order
	// (POST /cleaning_orders)
	PostCleaningOrders(ctx echo.Context) error
	// Delete cleaning order
	// (DELETE /cleaning_orders/{id})
	DeleteCleaningOrdersId(ctx echo.Context, id int) error
	// Get cleaning order by ID
	// (GET /cleaning_orders/{id})
	GetCleaningOrdersId(ctx echo.Context, id int) error
	// Update cleaning order
	// (PUT /cleaning_orders/{id})
	PutCleaningOrdersId(ctx echo.Context, id int) error
	// Assign cleaner to cleaning order
	// (POST /cleaning_orders/{id}/cleaners)
	PostCleaningOrdersIdCleaners(ctx echo.Context, id int) error
	// Remove cleaner from cleaning order
	// (DELETE /cleaning_orders/{id}/cleaners/{cleanerId})
	DeleteCleaningOrdersIdCleanersCleanerId(ctx echo.Context, id int, cleanerId int) error
	// List all rooms
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// Create a new room
	// (POST /rooms)
	PostRooms(ctx echo.Context) error
	// Delete room
	// (DELETE /rooms/{id})
	DeleteRoomsId(ctx echo.Context, id int) error
	// Get room by ID
	// (GET /rooms/{id})
	GetRoomsId(ctx echo.Context, id int) error
	// Update room
	// (PUT /rooms/{id})
	PutRoomsId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBookings converts echo context to params.
func (w *ServerInterfaceWrapper) GetBookings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBookings(ctx)
	return err
}

// PostBookings converts echo context to params.
func (w *ServerInterfaceWrapper) PostBookings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBookings(ctx)
	return err
}

// DeleteBookingsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBookingsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBookingsId(ctx, id)
	return err
}

// GetBookingsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBookingsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBookingsId(ctx, id)
	return err
}

// PutBookingsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBookingsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutBookingsId(ctx, id)
	return err
}

// GetCleaners converts echo context to params.
func (w *ServerInterfaceWrapper) GetCleaners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCleaners(ctx)
	return err
}

// PostCleaners converts echo context to params.
func (w *ServerInterfaceWrapper) PostCleaners(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCleaners(ctx)
	return err
}

// DeleteCleanersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCleanersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCleanersId(ctx, id)
	return err
}

// GetCleanersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCleanersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCleanersId(ctx, id)
	return err
}

// PutCleanersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCleanersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCleanersId(ctx, id)
	return err
}

// GetCleaningOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetCleaningOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCleaningOrders(ctx)
	return err
}

// PostCleaningOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostCleaningOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCleaningOrders(ctx)
	return err
}

// DeleteCleaningOrdersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCleaningOrdersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCleaningOrdersId(ctx, id)
	return err
}

// GetCleaningOrdersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCleaningOrdersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCleaningOrdersId(ctx, id)
	return err
}

// PutCleaningOrdersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCleaningOrdersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCleaningOrdersId(ctx, id)
	return err
}

// PostCleaningOrdersIdCleaners converts echo context to params.
func (w *ServerInterfaceWrapper) PostCleaningOrdersIdCleaners(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCleaningOrdersIdCleaners(ctx, id)
	return err
}

// DeleteCleaningOrdersIdCleanersCleanerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCleaningOrdersIdCleanersCleanerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "cleanerId" -------------
	var cleanerId int

	err = runtime.BindStyledParameterWithOptions("simple", "cleanerId", ctx.Param("cleanerId"), &cleanerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cleanerId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCleaningOrdersIdCleanersCleanerId(ctx, id, cleanerId)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// PostRooms converts echo context to params.
func (w *ServerInterfaceWrapper) PostRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRooms(ctx)
	return err
}

// DeleteRoomsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoomsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoomsId(ctx, id)
	return err
}

// GetRoomsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomsId(ctx, id)
	return err
}

// PutRoomsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRoomsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRoomsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bookings", wrapper.GetBookings)
	router.POST(baseURL+"/bookings", wrapper.PostBookings)
	router.DELETE(baseURL+"/bookings/:id", wrapper.DeleteBookingsId)
	router.GET(baseURL+"/bookings/:id", wrapper.GetBookingsId)
	router.PUT(baseURL+"/bookings/:id", wrapper.PutBookingsId)
	router.GET(baseURL+"/cleaners", wrapper.GetCleaners)
	router.POST(baseURL+"/cleaners", wrapper.PostCleaners)
	router.DELETE(baseURL+"/cleaners/:id", wrapper.DeleteCleanersId)
	router.GET(baseURL+"/cleaners/:id", wrapper.GetCleanersId)
	router.PUT(baseURL+"/cleaners/:id", wrapper.PutCleanersId)
	router.GET(baseURL+"/cleaning_orders", wrapper.GetCleaningOrders)
	router.POST(baseURL+"/cleaning_orders", wrapper.PostCleaningOrders)
	router.DELETE(baseURL+"/cleaning_orders/:id", wrapper.DeleteCleaningOrdersId)
	router.GET(baseURL+"/cleaning_orders/:id", wrapper.GetCleaningOrdersId)
	router.PUT(baseURL+"/cleaning_orders/:id", wrapper.PutCleaningOrdersId)
	router.POST(baseURL+"/cleaning_orders/:id/cleaners", wrapper.PostCleaningOrdersIdCleaners)
	router.DELETE(baseURL+"/cleaning_orders/:id/cleaners/:cleanerId", wrapper.DeleteCleaningOrdersIdCleanersCleanerId)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.POST(baseURL+"/rooms", wrapper.PostRooms)
	router.DELETE(baseURL+"/rooms/:id", wrapper.DeleteRoomsId)
	router.GET(baseURL+"/rooms/:id", wrapper.GetRoomsId)
	router.PUT(baseURL+"/rooms/:id", wrapper.PutRoomsId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhP+KwLf96jGTttDodvuBkgNBOhig56CxYJLjW0mEqmQlAvD8H8vSIr6sCRK",
	"2tpyDORmk5zhzDPPfNA+IMLTjDNgSqLogCTZQorNx3vOv1G20R8zwTMQioLZIFsg314oe7Eiay5SrFCE",
	"YqzgF0VTQCFS+wxQhKQSWsUxLIR4riZJbXKQ9nyxRZmCDQi9R+PudcF5+tK9qXfhe04FxCj6ojVUx5/L",
	"6/nrVyBKqyogeBCAFTzBd23ND4vHeL/dybBh+olNHjz+zuKfeOgrHhLADEQbgj5uMpxCbadyROaiZ6+L",
	"s+ZoJeQxbYC6/92e8ab8JeIuqIjdfemDrG+da3UT8rx2T014yN6h1Pcaf2LGZAsG8uxtweu+jLJNT3xe",
	"bc73xocU4tOyvRQyOx0+EG5dbl8Yc1YXeeVcK/NRhXEFcmRq1dwtjHgewmyAIzcE4Eig2hg1vRhEbIDY",
	"PxHTqp84T9vYxCBJp/XrhHMxpYR2sd8q6bNmgOjTTTsxwX/7AGnedPvJRXqJsjV3+gTNFOUMRejucRWs",
	"uQhSzPCGsk2w5QqSwMUw0JZgfVbPDYqqRKv905xxzA8+g9hRAsHd4wqFaAdCWt3v3y3fLU1Ly4DhjKII",
	"/WaWQpRhtTXeLQoGmS8bMP6Xd65iFKGPoO7dGQ2rzDiTFppfl0vTrDhTwIwozrKEEiO8+Cq1FW70N9OL",
	"gtQI/l/AGkXof4vqkbAoXggL9zyoUMRC4L0FsQne55wQkHKdJ4Gzy6Av8zTFYo8i9IlKFeAkCUo3jyHK",
	"inxs+vnIZdNRw4d7Hu8n+TjCtSbdj022KpHDsYXz+3Pb0AVnsRUQY198AqW1OsABg38cnOZISaHFgcZH",
	"S/EEFLQh/mDWHcir2BBR4BQUCImiLwdEtR2anG4YjYrHVAOfsOZrK/meW+D93k4756q19NRVa2flZDiY",
	"GbP5spyTCDFW+ASaj6AcLsHrPlh9MAmVd+VTPgs6F8vSZlsYlaWzBMfaFZdR6AiSPdJM0uKR4K3zD+7M",
	"HHXevXHPW+dLN711vuHo+RnU+Uaeuc6X8LbhLLbG1HlSaqlRaGSddyBfs847V711nlRMHMqMG6zzI4jQ",
	"U+cLXIbr/BzoXCxLr1rnPcFxdZ70B6mo8+0k1a8/80PQcLl3T+cZi375m9AFSr95M1l/hjtA0/cLMaz7",
	"15xrdIMK955SUII3ujWUEp3km9IoylhcvV1UKAx3jZr/4cg8u9UWMoE9vn5SnRrXVmbB7cKpf/0W4wte",
	"o9F4g1jvNyMyv/HmGFuKV3FtOL+1WeIHKfTuPzHPyIelpBvWqm13ZrmcORSfHuzFofi0ekvtd8F/cDou",
	"woKwUwup3Xmph4iAlO9asD+Z1RL2teBpJ/CC89Q70j2ZA3NMcuZfhPMOcNY779hW+Xf+HG7/EzFz7lpI",
	"2xDq9TETmbDyjicjpy8D6TWHLuOed9QSBde8rL/Bucob8J4hSmMxPDpdHJHLpN9VB6W+aLj5SPREpZiK",
	"RCkuQewc3k1VnzjBSRDDDhKepcBUYM+iEOUiQRHaKpVFi0Wiz225VNEfy+USHZ+P/wYAAP//hGqePVAn",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
