Hotel Cleaning Service API 🧹🏨
A RESTful API for managing hotel cleaning operations, including room bookings, cleaners, and cleaning orders.

📌 Overview
This service provides a full CRUD (Create, Read, Update, Delete) interface for managing:

Rooms: Track hotel rooms with floor and description.
Cleaners: Manage cleaner profiles (name, surname).
Bookings: Record guest bookings with check-in/check-out times.
Cleaning Orders: Assign cleaning tasks to cleaners, track completion status, and costs.
Built with Go, PostgreSQL, and OpenAPI 3.0 for API specification.

✅ Features
Full CRUD operations for all entities.
Many-to-many relationships between cleaners and cleaning orders.
Timestamp-based booking and cleaning scheduling.
Cost tracking for cleaning services.
API documentation via OpenAPI 3.0 (YAML format).
🛠️ Prerequisites
Before running the service, ensure you have:

Go 1.20+ installed.
PostgreSQL 14+ with a configured database.
Docker (optional, for local development).
Swagger UI / Postman (for API testing).

🚀 Installation & Setup
1. Clone the Repository
bash
git clone https://github.com/yourusername/hotel-cleaning-api.git
cd hotel-cleaning-api
2. Set Up the Database
sql
-- Create a database and tables
CREATE DATABASE hotel_cleaning;

-- Example schema (see `db/schema.sql`)
CREATE TABLE rooms (
    id SERIAL PRIMARY KEY,
    floor INT NOT NULL,
    desc TEXT
);

-- Add other tables: cleaners, bookings, cleaning_orders, cleaner_orders
3. Configure Environment Variables
Create a .env file:

env
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=hotel_cleaning
DB_HOST=localhost
DB_PORT=5432
PORT=8000
4. Install Dependencies
bash
go mod download
5. Run the Server
bash
go run cmd/main.go
# or with Docker
docker-compose up
📘 API Documentation
The API is documented using OpenAPI 3.0 (docs/openapi.cleany.yaml).
Use Swagger UI to visualize and test endpoints:

bash
# Start the server
go run cmd/main.go

# Access Swagger UI at:

http://localhost:8000/swagger
📁 Project Structure
hotel-cleaning-api/
├── cmd/              # Entry point (main.go)
├── internal/         # Core business logic
│   ├── models/       # Data models (Room, Cleaner, Booking, etc.)
│   ├── repo/         # Database repositories
│   └── service/      # Business services
├── pkg/              # Shared utilities (e.g., time parsing)
├── docs/             # OpenAPI spec (openapi.cleany.yaml)
├── db/               # Database migrations/schema
└── go.mod/go.sum     # Go dependencies
🔧 Usage Examples
1. Create a Room
bash
curl -X POST http://localhost:8000/rooms \
  -H "Content-Type: application/json" \
  -d '{"floor": 5, "desc": "Deluxe Suite"}'
2. Get All Cleaners
bash
curl http://localhost:8000/cleaners
3. Assign a Cleaner to a Cleaning Order
bash
curl -X POST http://localhost:8000/cleaning_orders/1/cleaners \
  -H "Content-Type: application/json" \
  -d '{"cleaner_id": 2}'
🧪 Testing
Run unit tests:

bash
go test ./...
📄 License
This project is licensed under the MIT License – see the LICENSE file for details.

📞 Contact
For questions or contributions, reach out:

Author: Anastasia
GitHub: https://github.com/yourusername

🌟 Contributing
Fork the repository.
Create a feature branch: git checkout -b feature/your-feature.
Commit your changes: git commit -am 'Add your feature'.
Push to GitHub: git push origin feature/your-feature.
Open a pull request.
Let’s keep hotels sparkling clean! 🧼✨

